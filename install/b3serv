#!/bin/bash

export LC_ALL=C.UTF-8
rm -fr SHARED_MEMORY_KEY STOP
SHARED_MEMORY_THRESHOLD=$((1024*500)) # Kb 

# set the memory key
SHARED_MEMORY_FILE=/tmp/roboschool_sm_key
SHARED_MEMORY_KEY=$((10000*(1 + RANDOM)))
if [[ -e $SHARED_MEMORY_FILE ]]; then
    while [[ ! -z "$(cat  $SHARED_MEMORY_FILE | grep "\<$SHARED_MEMORY_KEY\>")" ]]; do
        SHARED_MEMORY_KEY=$((10000*(1 + RANDOM)))
    done
fi

# update the key file
echo $SHARED_MEMORY_KEY >> $SHARED_MEMORY_FILE
echo $SHARED_MEMORY_KEY > SHARED_MEMORY_KEY


# open the bullet physiscs server
physics_server --shared_memory_key=$SHARED_MEMORY_KEY &> /tmp/server${SHARED_MEMORY_KEY}_log &
physics_server_pid=$!
sleep 1

# run the python command 
eval "$@ &"
script_pid=$!


# control python app and memory 
while [[ ! -z "$(ps -e | grep "${script_pid}")" ]]; do 
    mem=$(ps xosize,pid | grep $physics_server_pid| awk '{print $1}')
    if [[ $mem -ge $SHARED_MEMORY_THRESHOLD ]]; then

        echo "Shared memory reached $(echo $SHARED_MEMORY_THRESHOLD/1024 | bc -l | xargs printf "%6.2f")Mb. Resetting..."

        touch STOP
        while [[ ! -f STOPPED ]]; do sleep 0.1; done
        # close the bullet physics server
        kill $physics_server_pid
        while [[ ! -z "$(ps -e | grep "${physics_server_pid}")" ]]; do echo "wait"; sleep 0.1; done

        # reepen the bullet physiscs server
        physics_server --shared_memory_key=$SHARED_MEMORY_KEY &> /tmp/server${SHARED_MEMORY_KEY}_log &
        physics_server_pid=$!
        echo $physics_server_pid
        sleep .1
        rm STOP
        sleep .1
        rm STOPPED
    fi
    sleep 0.5 
done

kill $physics_server_pid

# update the key file
echo "$(cat $SHARED_MEMORY_FILE | grep -v "\<$SHARED_MEMORY_KEY\>")" > $SHARED_MEMORY_FILE



